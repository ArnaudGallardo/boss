# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-11-12 17:48
from __future__ import unicode_literals

import bosscore.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BossGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Bossgroup', to=settings.AUTH_USER_MODEL)),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'db_table': 'bossgroup',
                'permissions': (('maintain_group', 'Can add and remove people from the group'),),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='BossLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lookup_key', models.CharField(max_length=255)),
                ('boss_key', models.CharField(max_length=255)),
                ('collection_name', models.CharField(max_length=255)),
                ('experiment_name', models.CharField(blank=True, max_length=255, null=True)),
                ('channel_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'lookup',
            },
        ),
        migrations.CreateModel(
            name='BossRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'ADMIN'), ('user-manager', 'USER-MANAGER'), ('resource-manager', 'RESOURCE-MANAGER')], max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Role', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, validators=[bosscore.models.NameValidator()], verbose_name='Name of the Channel')),
                ('description', models.CharField(blank=True, max_length=4096)),
                ('base_resolution', models.IntegerField(default=0)),
                ('default_time_step', models.IntegerField(default=0)),
                ('type', models.CharField(choices=[('image', 'IMAGE'), ('annotation', 'ANNOTATION')], max_length=100)),
                ('datatype', models.CharField(choices=[('uint8', 'UINT8'), ('uint16', 'UINT16'), ('uint32', 'UINT32'), ('uint64', 'UINT64')], max_length=100)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Channel', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'channel',
                'permissions': (('read', 'Can view resource'), ('update', 'Can update resource'), ('delete', 'Can delete resource'), ('add', 'Can add resources '), ('assign_group', 'Can assign groups permissions for the resource'), ('remove_group', 'Can remove groups permissions for the resource'), ('add_volumetric_data', 'Can add volumetric data for the channel'), ('read_volumetric_data', 'Can read volumetric data for the channel'), ('delete_volumetric_data', 'Can delete volumetric data for the channel')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, validators=[bosscore.models.NameValidator()], verbose_name='Name of the Collection')),
                ('description', models.CharField(blank=True, max_length=4096)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'collection',
                'managed': True,
                'permissions': (('read', 'Can view resource'), ('update', 'Can update resource'), ('delete', 'Can delete resource'), ('add', 'Can add resources '), ('assign_group', 'Can assign groups permissions for the resource'), ('remove_group', 'Can remove groups permissions for the resource')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CoordinateFrame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, validators=[bosscore.models.NameValidator()], verbose_name='Name of the Coordinate reference frame')),
                ('description', models.CharField(blank=True, max_length=4096)),
                ('x_start', models.IntegerField()),
                ('x_stop', models.IntegerField()),
                ('y_start', models.IntegerField()),
                ('y_stop', models.IntegerField()),
                ('z_start', models.IntegerField()),
                ('z_stop', models.IntegerField()),
                ('x_voxel_size', models.FloatField()),
                ('y_voxel_size', models.FloatField()),
                ('z_voxel_size', models.FloatField()),
                ('voxel_unit', models.CharField(choices=[('nanometers', 'NANOMETERS'), ('micrometers', 'MICROMETERS'), ('millimeters', 'MILLIMETERS'), ('centimeters', 'CENTIMETERS')], max_length=100)),
                ('time_step', models.IntegerField()),
                ('time_step_unit', models.CharField(choices=[('nanoseconds', 'NANOSECONDS'), ('microseconds', 'MICROSECONDS'), ('milliseconds', 'MILLISECONDS'), ('seconds', 'SECONDS')], max_length=100)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coordinateframes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'coordinate_frame',
                'permissions': (('read', 'Can view resource'), ('update', 'Can update resource'), ('delete', 'Can delete resource'), ('add', 'Can add resources '), ('assign_group', 'Can assign groups permissions for the resource'), ('remove_group', 'Can remove groups permissions for the resource')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, validators=[bosscore.models.NameValidator()], verbose_name='Name of the Experiment')),
                ('description', models.CharField(blank=True, max_length=4096)),
                ('num_hierarchy_levels', models.IntegerField(default=0)),
                ('hierarchy_method', models.CharField(choices=[('near_iso', 'NEAR_ISO'), ('iso', 'ISO'), ('slice', 'SLICE')], max_length=100)),
                ('max_time_sample', models.IntegerField(default=0)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='experiments', to='bosscore.Collection')),
                ('coord_frame', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='coord', to='bosscore.CoordinateFrame')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'experiment',
                'permissions': (('read', 'Can view resource'), ('update', 'Can update resource'), ('delete', 'Can delete resource'), ('add', 'Can add resources '), ('assign_group', 'Can assign groups permissions for the resource'), ('remove_group', 'Can remove groups permissions for the resource')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('derived_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='derived_channel', to='bosscore.Channel')),
                ('source_channel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='source_channel', to='bosscore.Channel')),
            ],
        ),
        migrations.AddField(
            model_name='channel',
            name='experiment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='channels', to='bosscore.Experiment'),
        ),
        migrations.AddField(
            model_name='channel',
            name='related',
            field=models.ManyToManyField(blank=True, related_name='_channel_related_+', to='bosscore.Channel'),
        ),
        migrations.AddField(
            model_name='channel',
            name='sources',
            field=models.ManyToManyField(blank=True, related_name='derived', through='bosscore.Source', to='bosscore.Channel'),
        ),
        migrations.AlterUniqueTogether(
            name='bosslookup',
            unique_together=set([('lookup_key', 'boss_key')]),
        ),
        migrations.AlterUniqueTogether(
            name='experiment',
            unique_together=set([('collection', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='channel',
            unique_together=set([('experiment', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='bossrole',
            unique_together=set([('user', 'role')]),
        ),
    ]
